#!/bin/bash
#
# evaluate free system memory from Linux based systems
#
# Date: 2007-11-12
# Author: Thomas Borger - ESG
# Date: 2009-09-30
# Modified : Daniel Roche - Lectra
#
# the memory check is done with following command line:
# free -m | grep buffers/cache | awk '{ print $4 }'

# get arguments

VALWARN=""
VALCRIT=""
HELP=0
PERF=0

while getopts 'w:c:hp' OPT; do
  case $OPT in
    w)  VALWARN=$OPTARG;;
    c)  VALCRIT=$OPTARG;;
    h)  HELP=1;;
    p)  PERF=1;;
    *)  HELP=1;;
  esac
done

# usage
USAGE="
 check linux real memory usage (do not count cache)

 usage: $0 [ -w value -c value -p -h ]
 syntax:
   -w INTEGER
      exit with WARNING status if less than INTEGER megabyte of mem are free
   -c INTEGER
      exit with CRITICAL status if less than INTEGER megabyte of mem are free
   -w PERCENT%
      exit with WARNING status if less than PERCENT mem are free
   -c PERCENT%
      exit with CRITICAL status if less than PERCENT of mem are free
   -p
      print out performance data
   -h
      print this help screen
"

if [ ${HELP} = 1 -o $# -lt 1 -o "${VALWARN}" = "" -o "${VALCRIT}" = "" ]; then
  echo "${USAGE}"
  exit 0
fi

# get memory values
set $(free -m)
FMEM=${17}
UMEM=${16}
SMEM=${8}

# transform percent eventually
WPERC=$(expr "${VALWARN}" : '\([0-9]*\)%')
if [ "${WPERC}" != "" ]
then
  V2WARN=$((SMEM * WPERC / 100))
else
  V2WARN=${VALWARN}
fi
CPERC=$(expr "${VALCRIT}" : '\([0-9]*\)%')
if [ "${CPERC}" != "" ]
then
  V2CRIT=$((SMEM * CPERC / 100))
else
  V2CRIT=${VALCRIT}
fi

if [ ${V2WARN} -lt ${V2CRIT} ]
then
  echo "=== ERROR === : WARNING value must be > CRITICAL"
  echo "${USAGE}"
  exit 0
fi

#echo "total=$SMEM used=$UMEM free=$FMEM warn=$V2WARN crit=$V2CRIT"
#exit 0

# output standard and performance data
OUTPUTP=" | used=${UMEM}m size=${SMEM}m"
OUTPUT="free system memory: ${FMEM} Mb"

if [ -n "${V2WARN}" -a -n "${V2CRIT}" ]
then

  ERR=0

  if [ ${FMEM} -le ${V2WARN} ]
  then
    ERR=1
  fi
  if [ ${FMEM} -le ${V2CRIT} ]
  then
    ERR=2
  fi

  if [ ${ERR} -eq  0 ]
  then
    echo -n "OK - ${OUTPUT}"
  elif [ ${ERR} -eq 1 ]
  then
    echo -n "WARNING - ${OUTPUT}"
  elif [ ${ERR} -eq 2 ]
  then
    echo -n "CRITICAL - ${OUTPUT}"
  fi
  if [ $PERF -eq 1 ]
  then
    echo ${OUTPUTP}
  else
    echo ""
  fi
  exit ${ERR}

else

  echo "no output from plugin"
  exit 3

fi
exit